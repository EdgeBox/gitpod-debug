---
# List the ports you want to expose and what to do when they are served. See https://www.gitpod.io/docs/config-ports/
ports:
# App
  - port: 3000
    onOpen: ignore
    visibility: public
# Embed
  - port: 3001
    onOpen: ignore
    visibility: public
# API
  - port: 3010
    onOpen: ignore
    visibility: public
# Sync Core
  - port: 3020
    onOpen: ignore
    visibility: public
# Proxy
  - port: 3040
    onOpen: ignore
    visibility: public
# Drupal
## Default Export
  - port: 3030
    onOpen: ignore
    visibility: public
## Default Import
  - port: 3031
    onOpen: ignore
    visibility: public
## Syndication Site 1
  - port: 3032
    onOpen: ignore
    visibility: public
## Syndication Site 2
  - port: 3033
    onOpen: ignore
    visibility: public
## Syndication Site 3
  - port: 3034
    onOpen: ignore
    visibility: public
## Fresh Export
  - port: 3035
    onOpen: ignore
    visibility: public
## Fresh Import
  - port: 3036
    onOpen: ignore
    visibility: public

github:
  prebuilds:
    master: true
    branches: false
    pullRequests: true
    addCheck: true
    addComment: true
    addBadge: true
    addLabel: true

image:
  file: .gitpod.Dockerfile

vscode:
  extensions:
    - ms-azuretools.vscode-docker
    - ms-vscode.vscode-typescript-tslint-plugin
    - wayou.vscode-todo-highlight
    - mongodb.mongodb-vscode
    - neilbrayfield.php-docblocker
    - felixfbecker.php-debug
    - felixfbecker.php-intellisense
    - bmewburn.vscode-intelephense-client
    - https://github.com/breeze2/vscode-phpstan/releases/download/v1.1.5/phpstan-1.1.5.vsix
    - mhutchie.git-graph
    - cweijan.vscode-mysql-client2
    - tabnine.tabnine-vscode
    - mblode.twig-language-2

# List the start up tasks. You can start them in parallel in multiple terminals. See https://www.gitpod.io/docs/config-start-tasks/
tasks:
#
# Prepare environment
#

# Provide submodules and required environment variables
  - init: >
      cp .env.template .env
    command: >
      sudo service cron start &&
      gp sync-done variables &&
      exit
    name: Init .env file
  - command: >
      aws configure set region eu-central-1 &&
      exit
    name: Init AWS config
  - init: >
      git submodule update --init --remote
    command: >
      gp sync-done submodules-prepare &&
      exit
    name: Prepare all submodules
  - init: >
      gp sync-await submodules-prepare &&
      cd services/api &&
      git checkout stage &&
      git pull --rebase origin stage
    command: >
      gp sync-done submodule-api &&
      exit
    name: Init submodule api
  - init: >
      gp sync-await submodules-prepare &&
      cd services/app &&
      git checkout stage &&
      git pull --rebase origin stage
    command: >
      gp sync-done submodule-app &&
      exit
    name: Init submodule app
  - init: >
      gp sync-await submodules-prepare &&
      cd services/embed &&
      git checkout stage &&
      git pull --rebase origin stage
    command: >
      gp sync-done submodule-embed &&
      exit
    name: Init submodule embed
  - init: >
      gp sync-await submodules-prepare &&
      cd services/sync-core-2 &&
      git checkout stage &&
      git pull --rebase origin stage
    command: >
      gp sync-done submodule-sync-core-2 &&
      exit
    name: Init submodule sync-core-2
  - init: >
      gp sync-await submodules-prepare &&
      cd drupal/docroot &&
      if [ "$D9" == "true" ]; then
      git checkout 9.x-dev &&
      git pull --rebase origin 9.x-dev;
      else
      git checkout 8.x-dev &&
      git pull --rebase origin 8.x-dev;
      fi
    command: >
      gp sync-done submodule-d8 &&
      exit
    name: Init submodule drupal-d8
  - init: >
      gp sync-await submodules-prepare &&
      cd php-library &&
      if [ "$v1" == "true" ]; then
      git checkout 2.x &&
      git pull --rebase origin 2.x &&
      composer install;
      else
      git checkout 3.x &&
      git pull --rebase origin 3.x &&
      composer install &&
      cd tools &&
      composer install &&
      composer cghooks update;
      fi
    command: >
      gp sync-done submodule-php-library &&
      exit
    name: Init submodule library
  - init: >
      gp sync-await submodules-prepare &&
      cd drupal/module &&
      if [ "$v1" == "true" ]; then
      git checkout 8.x-1.x &&
      git pull --rebase origin 8.x-1.x;
      else
      git checkout 2.0.x &&
      git pull --rebase origin 2.0.x &&
      cd tools &&
      composer install &&
      composer cghooks update;
      fi
    command: >
      gp sync-done submodule-module &&
      exit
    name: Init submodule module
  - init: >
      sudo chown root ./hosting/elastic/conf/filebeat.docker.yml
    command: >
      gp sync-done ensure-permissions &&
      exit
    name: Ensure permissions
  - command: >
      gp sync-await variables &&
      gp sync-await submodule-api &&
      gp sync-await submodule-app &&
      gp sync-await submodule-embed &&
      gp sync-await submodule-sync-core-2 &&
      gp sync-await submodule-d8 &&
      gp sync-await submodule-php-library &&
      gp sync-await submodule-module &&
      gp sync-done submodules &&
      gp sync-done ensure-permissions &&
      exit
    name: Submodules ready

#
# Drupal + MySQL
#
# Drupal - Preperation
  - init: >
      gp sync-await submodules &&
      source env.sh &&
      (docker network rm $(docker network ls -q -f name=stack_default) || true) &&
      docker-compose build drupal &&
      (docker network rm $(docker network ls -q -f name=stack_default) || true) &&
      docker-compose run --no-deps --rm drupal-setup /root/bin/composer install
    command: >
      gp sync-done drupal-preparation &&
      exit
    name: Drupal - Install packages
  - init: >
      gp sync-await drupal-preparation &&
      source env.sh &&
      /workspace/stack/drupal/docroot/scripts/set-permissions.sh &&
      docker-compose up -d --no-deps drupal redis &&
      sleep 30
    command: >
      gp sync-done drupal-start-containers &&
      exit
    name: Drupal - Start containers

# Drupal - Mysql - Preperation
  - init: >
      gp sync-await submodules &&
      source env.sh &&
      (docker network rm $(docker network ls -q -f name=stack_default) || true) &&
      docker-compose up -d --no-deps mysql &&
      if [ "$D9" == "true" ]; then
      aws s3 cp s3://gitpod-files/drupal-database-dumps/d9_default-export.sql ./drupal/default-export.sql &&
      aws s3 cp s3://gitpod-files/drupal-database-dumps/d9_default-import.sql ./drupal/default-import.sql;
      else
      aws s3 cp s3://gitpod-files/drupal-database-dumps/d8_default-export.sql ./drupal/default-export.sql &&
      aws s3 cp s3://gitpod-files/drupal-database-dumps/d8_default-import.sql ./drupal/default-import.sql;
      fi &&
      if [ "$START_SYNDICATION_SITES" == "true" ]; then
      aws s3 cp s3://gitpod-files/drupal-database-dumps/syndication-site-1.sql ./drupal/syndication-site-1.sql &&
      aws s3 cp s3://gitpod-files/drupal-database-dumps/syndication-site-2.sql ./drupal/syndication-site-2.sql &&
      aws s3 cp s3://gitpod-files/drupal-database-dumps/syndication-site-3.sql ./drupal/syndication-site-3.sql;
      fi &&
      if [ "$FRESH_INSTALLATION" == "true" ]; then
      aws s3 cp s3://gitpod-files/drupal-database-dumps/fresh-site.sql ./drupal/fresh-site.sql;
      fi &&
      ./scripts/wait-for-healthy-container.sh stack_mysql_1 &&
      docker-compose exec mysql mysql -proot_password -e "CREATE USER 'drupal'@'%' IDENTIFIED by 'drupal';" &&
      docker-compose exec mysql mysql -proot_password -e "GRANT ALL PRIVILEGES ON *.* to 'drupal'@'%';" &&
      docker-compose exec mysql mysql -proot_password -e "CREATE DATABASE default_export;" &&
      docker-compose exec mysql mysql -proot_password -e "CREATE DATABASE default_import;" &&
      if [ "$START_SYNDICATION_SITES" == "true" ]; then
      docker-compose exec mysql mysql -proot_password -e "CREATE DATABASE syndication_site_1;" &&
      docker-compose exec mysql mysql -proot_password -e "CREATE DATABASE syndication_site_2;" &&
      docker-compose exec mysql mysql -proot_password -e "CREATE DATABASE syndication_site_3;";
      fi &&
      if [ "$FRESH_INSTALLATION" == "true" ]; then
      docker-compose exec mysql mysql -proot_password -e "CREATE DATABASE fresh_export;" &&
      docker-compose exec mysql mysql -proot_password -e "CREATE DATABASE fresh_import;";
      fi &&
      docker-compose exec mysql mysql -proot_password -e "FLUSH PRIVILEGES;"
    command: >
      gp sync-done drupal-mysql-preparation &&
      exit
    name: Drupal - MySQL - Preparation
  - init: >
      gp sync-await drupal-mysql-preparation &&
      source env.sh &&
      docker-compose exec -T mysql mysql -uroot -proot_password "default_export" < ./drupal/default-export.sql &&
      if [ "$D9" == "true" ]; then
      docker-compose exec mysql mysql -proot_password -e "use default_export; DELETE FROM key_value WHERE name='cms_content_sync.site_uuid'";
      fi &&
      rm ./drupal/default-export.sql
    command: >
      gp sync-done drupal-mysql-import-default-export &&
      exit
    name: Drupal - MySQL - Import default_export.sql
  - init: >
      gp sync-await drupal-mysql-preparation &&
      source env.sh &&
      docker-compose exec -T mysql mysql -uroot -proot_password "default_import" < ./drupal/default-import.sql &&
      if [ "$D9" == "true" ]; then
      docker-compose exec mysql mysql -proot_password -e "use default_import; DELETE FROM key_value WHERE name='cms_content_sync.site_uuid'";
      fi &&
      rm ./drupal/default-import.sql
    command: >
      gp sync-done drupal-mysql-import-default-import &&
      exit
    name: Drupal - MySQL - Import default_import.sql
  - init: >
      gp sync-await drupal-mysql-preparation &&
      source env.sh &&
      if [ "$START_SYNDICATION_SITES" == "true" ]; then
      docker-compose exec -T mysql mysql -uroot -proot_password "syndication_site_1" < ./drupal/syndication-site-1.sql && rm ./drupal/syndication-site-1.sql;
      fi
    command: >
      gp sync-done drupal-mysql-syndication-1-import &&
      exit
    name: Drupal - MySQL - Import syndication-site-1.sql
  - init: >
      gp sync-await drupal-mysql-preparation &&
      source env.sh &&
      if [ "$START_SYNDICATION_SITES" == "true" ]; then
      docker-compose exec -T mysql mysql -uroot -proot_password "syndication_site_2" < ./drupal/syndication-site-2.sql && rm ./drupal/syndication-site-2.sql;
      fi
    command: >
      gp sync-done drupal-mysql-syndication-2-import &&
      exit
    name: Drupal - MySQL - Import syndication-site-2.sql
  - init: >
      gp sync-await drupal-mysql-preparation &&
      source env.sh &&
      if [ "$START_SYNDICATION_SITES" == "true" ]; then
      docker-compose exec -T mysql mysql -uroot -proot_password "syndication_site_3" < ./drupal/syndication-site-3.sql && rm ./drupal/syndication-site-3.sql;
      fi
    command: >
      gp sync-done drupal-mysql-syndication-3-import &&
      exit
    name: Drupal - MySQL - Import syndication-site-3.sql
  - init: >
      gp sync-await drupal-mysql-preparation &&
      source env.sh &&
      if [ "$FRESH_INSTALLATION" == "true" ]; then
      docker-compose exec -T mysql mysql -uroot -proot_password "fresh_export" < ./drupal/fresh-site.sql;
      fi
    command: >
      gp sync-done drupal-mysql-fresh-export-import &&
      exit
    name: Drupal - MySQL - Import fresh-site.sql into fresh_export
  - init: >
      gp sync-await drupal-mysql-preparation &&
      source env.sh &&
      if [ "$FRESH_INSTALLATION" == "true" ]; then
      docker-compose exec -T mysql mysql -uroot -proot_password "fresh_import" < ./drupal/fresh-site.sql &&
      rm ./drupal/fresh-site.sql;
      fi
    command: >
      gp sync-await drupal-mysql-fresh-export-import &&
      gp sync-done drupal-mysql-fresh-import-import &&
      exit
    name: Drupal - MySQL - Import fresh-site.sql into fresh_import

# Drupal
  - init: >
      gp sync-await drupal-start-containers &&
      gp sync-await drupal-mysql-import-default-export &&
      gp sync-await drupal-mysql-import-default-import &&
      source env.sh &&
      docker exec -i stack_drupal_1 drush @default-export.local -y cim &&
      docker exec -i stack_drupal_1 drush @default-import.local -y cim &&
      docker exec -i stack_drupal_1 drush @default-export.local -y updb &&
      docker exec -i stack_drupal_1 drush @default-import.local -y updb &&
      docker exec -i stack_drupal_1 drush @default-export.local cr &&
      docker exec -i stack_drupal_1 drush @default-import.local cr &&
      curl --fail -sS https://$DEFAULT_EXPORT_DOMAIN/en > /dev/null &&
      curl --fail -sS https://$DEFAULT_IMPORT_DOMAIN/en > /dev/null
    command: >
      gp sync-done drupal-default-sites-start &&
      exit
    name: Drupal - Finish default sites start
  - init: >
      gp sync-await drupal-start-containers &&
      gp sync-await drupal-mysql-syndication-1-import &&
      gp sync-await drupal-mysql-syndication-2-import &&
      gp sync-await drupal-mysql-syndication-3-import &&
      source env.sh &&
      if [ "$START_SYNDICATION_SITES" == "true" ]; then
      docker exec -i stack_drupal_1 drush @syndication-site-1.local -y cim &&
      docker exec -i stack_drupal_1 drush @syndication-site-2.local -y cim &&
      docker exec -i stack_drupal_1 drush @syndication-site-3.local -y cim &&
      docker exec -i stack_drupal_1 drush @syndication-site-1.local -y updb &&
      docker exec -i stack_drupal_1 drush @syndication-site-2.local -y updb &&
      docker exec -i stack_drupal_1 drush @syndication-site-3.local -y updb &&
      docker exec -i stack_drupal_1 drush @syndication-site-1.local cr &&
      docker exec -i stack_drupal_1 drush @syndication-site-2.local cr &&
      docker exec -i stack_drupal_1 drush @syndication-site-3.local cr &&
      curl --fail -sS https://$SYNDICATION_SITE_1_DOMAIN/en > /dev/null &&
      curl --fail -sS https://$SYNDICATION_SITE_2_DOMAIN/en > /dev/null &&
      curl --fail -sS https://$SYNDICATION_SITE_3_DOMAIN/en > /dev/null;
      fi
    command: >
      gp sync-done drupal-syndication-sites-start &&
      exit
    name: Drupal - Finish syndication sites start
  - init: >
      gp sync-await drupal-start-containers &&
      gp sync-await drupal-mysql-preparation &&
      gp sync-await drupal-mysql-fresh-export-import &&
      source env.sh &&
      if [ "$FRESH_INSTALLATION" == "true" ]; then
      docker exec -i stack_drupal_1 chmod -R 0777 /opt/drupal/docroot/sites/fresh-export/files &&
      curl -s -d "apiKey=$GHOST_INSPECTOR_API_KEY" -d "export-site=https://$FRESH_EXPORT_DOMAIN" -d "import-site=https://$FRESH_IMPORT_DOMAIN" "https://api.ghostinspector.com/v1/tests/5e7b4957502f9e0d9a6e96cb/execute/" &&
      curl --fail -sS https://$FRESH_EXPORT_DOMAIN/en > /dev/null;
      fi
    command: >
      gp sync-done drupal-fresh-installation-export &&
      exit
    name: Drupal - Finish Fresh Installation - Export
  - init: >
      gp sync-await drupal-start-containers &&
      gp sync-await drupal-mysql-preparation &&
      gp sync-await drupal-mysql-fresh-import-import &&
      source env.sh &&
      if [ "$FRESH_INSTALLATION" == "true" ]; then
      docker exec -i stack_drupal_1 chmod -R 0777 /opt/drupal/docroot/sites/fresh-import/files &&
      docker exec -i stack_drupal_1 drush @fresh-import.local en cms_content_sync -y &&
      docker exec -i stack_drupal_1 drush @fresh-import.local en cms_content_sync_developer -y &&
      docker exec -i stack_drupal_1 drush @fresh-import.local en cms_content_sync_draggableviews -y &&
      docker exec -i stack_drupal_1 drush @fresh-import.local en cms_content_sync_health -y &&
      docker exec -i stack_drupal_1 drush @fresh-import.local en cms_content_sync_migrate_acquia_content_hub -y &&
      docker exec -i stack_drupal_1 drush @fresh-import.local en cms_content_sync_simple_sitemap -y &&
      docker exec -i stack_drupal_1 drush @fresh-import.local en cms_content_sync_views -y &&
      docker exec -i stack_drupal_1 drush @fresh-import.local cr &&
      curl --fail -sS https://$FRESH_IMPORT_DOMAIN/en > /dev/null;
      fi
    command: >
      gp sync-done drupal-fresh-installation-import &&
      exit
    name: Drupal - Finish Fresh Installation - Import
#
# Services
# Due to the fact that yarn can not be run simultaneously, the services have to be initiated one after another.
#
# 1. Sync Core 2 + Broker
  - init: >
      gp sync-await submodules &&
      source env.sh &&
      cd /workspace/stack/services/sync-core-2 &&
      yarn --frozen-lockfile &&
      cd /workspace/stack &&
      docker-compose up -d sync-core-2 &&
      docker-compose run --no-deps --rm sync-core-2 yarn --frozen-lockfile &&
      docker-compose run --no-deps --rm sync-core-2 yarn console:dev install new &&
      docker-compose run --no-deps --rm sync-core-2 yarn console-previews:dev previews create-index
    command: >
      gp sync-done sync-core-2-broker-start &&
      exit
    name: Sync Core 2 + Broker - Start
# 2. Sync Core - Api
  - init: >
      gp sync-await sync-core-2-broker-start &&
      source env.sh &&
      cd /workspace/stack/services/api &&
      yarn --frozen-lockfile &&
      cd /workspace/stack &&
      docker-compose up -d api &&
      docker-compose run --no-deps --rm api yarn --frozen-lockfile &&
      docker-compose run --no-deps --rm api yarn console:dev data import required
    command: >
      gp sync-done sync-core-api-start &&
      exit
    name: Sync Core - Api - Start
# 3. Sync Core - Embed
  - init: >
      gp sync-await sync-core-api-start &&
      source env.sh &&
      cd /workspace/stack/services/embed &&
      yarn --frozen-lockfile &&
      cd /workspace/stack &&
      docker-compose up -d embed &&
      docker-compose run --no-deps --rm embed yarn --frozen-lockfile
    command: >
      gp sync-done sync-core-embed-start &&
      exit
    name: Sync Core - Embed - Start
# 4. Sync Core - App
  - init: >
      gp sync-await sync-core-embed-start &&
      source env.sh &&
      cd /workspace/stack/services/app &&
      yarn --frozen-lockfile &&
      cd /workspace/stack &&
      docker-compose up -d app &&
      docker-compose run --no-deps --rm app yarn --frozen-lockfile
    command: >
      gp sync-done sync-core-services-start &&
      exit
    name: Sync Core - App - Start

#
# Finalize
#
  - command: >
      gp sync-await drupal-default-sites-start &&
      gp sync-await drupal-syndication-sites-start &&
      gp sync-await drupal-fresh-installation-export &&
      gp sync-await drupal-fresh-installation-import &&
      gp sync-await sync-core-services-start &&
      source env.sh &&
      aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 949515072404.dkr.ecr.eu-central-1.amazonaws.com &&
      echo "--- Starting up environment, hang tight! ---" &&
      docker-compose down &&
      (docker network rm $(docker network ls -q -f name=stack_default) || true) &&
      docker-compose up -d &&
      gp sync-done gitpod-ready &&
      exit
    name: Finalize

  - command: >
      watch --color '/workspace/stack/scripts/ram-usage.sh'
    name: Watch RAM usage

  - command: >
      echo "--- Starting up environment, hang tight! ---" &&
      source /workspace/stack/scripts/.bash_aliases &&
      source env.sh &&
      source scripts/.bash_aliases &&
      time gp sync-await gitpod-ready &&
      EXPORT_URL=$(ddrush @default-export.local uli) &&
      IMPORT_URL=$(ddrush @default-import.local uli) &&
      echo "Export Site: $EXPORT_URL" &&
      echo "Import Site: $IMPORT_URL" &&
      if [ "$START_SYNDICATION_SITES" == "true" ]; then
      echo "+++ Inclusiv Syndication sites! +++";
      SYNDICATION_SITE_1_URL=$(ddrush @syndication-site-1.local uli) &&
      SYNDICATION_SITE_2_URL=$(ddrush @syndication-site-2.local uli) &&
      SYNDICATION_SITE_3_URL=$(ddrush @syndication-site-3.local uli) &&
      echo "Syndication Site 1: $SYNDICATION_SITE_1_URL" &&
      echo "Syndication Site 2: $SYNDICATION_SITE_2_URL" &&
      echo "Syndication Site 3: $SYNDICATION_SITE_3_URL";
      fi &&
      if [ "$FRESH_INSTALLATION" == "true" ]; then
      echo "+++ Inclusiv Fresh installation sites! +++";
      FRESH_EXPORT_URL=$(ddrush @fresh-export.local uli) &&
      FRESH_IMPORT_URL=$(ddrush @fresh-import.local uli) &&
      echo "Fresh Export: $FRESH_EXPORT_URL" &&
      echo "Fresh Import: $FRESH_IMPORT_URL";
      fi
    name: Gitpod ready
